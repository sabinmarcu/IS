// Generated by CoffeeScript 1.7.1
(function() {
  var IS, chai, obj,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  IS = require("../../lib/isf.js");

  chai = require("chai");

  obj = IS.Object.clone();

  chai.should();

  describe("Function Overwrite Module", function() {
    it("Should overwrite properly", function() {
      var baseclass, object;
      baseclass = (function(_super) {
        __extends(baseclass, _super);

        function baseclass() {
          return baseclass.__super__.constructor.apply(this, arguments);
        }

        baseclass.m1 = function() {
          return "foo";
        };

        baseclass.m2 = function() {
          return 'bar';
        };

        return baseclass;

      })(obj);
      (baseclass.m1()).should.equal("foo");
      (baseclass.m2()).should.equal("bar");
      object = (function(_super) {
        __extends(object, _super);

        function object() {
          return object.__super__.constructor.apply(this, arguments);
        }

        object.extend(IS.Modules.Overwrite._extend_);

        IS.Modules.Overwrite("m1", (function() {
          return "bar";
        }), object);

        object._overwrite_("m2", (function() {
          return "baz";
        }), object);

        return object;

      })(baseclass);
      (object.m1()).should.equal("bar");
      return (object.m2()).should.equal("baz");
    });
    it("Should overwrite properly with the instances", function() {
      var baseclass, bc, o, object;
      baseclass = (function(_super) {
        __extends(baseclass, _super);

        function baseclass() {
          return baseclass.__super__.constructor.apply(this, arguments);
        }

        baseclass.prototype.m1 = function() {
          return "foo";
        };

        baseclass.prototype.m2 = function() {
          return 'bar';
        };

        return baseclass;

      })(obj);
      bc = new baseclass();
      (bc.m1()).should.equal("foo");
      (bc.m2()).should.equal("bar");
      object = (function(_super) {
        __extends(object, _super);

        function object() {
          return object.__super__.constructor.apply(this, arguments);
        }

        object.extend(IS.Modules.Overwrite._extend_);

        IS.Modules.Overwrite("m1", (function() {
          return "bar";
        }), object.prototype);

        object._overwrite_("m2", (function() {
          return "baz";
        }));

        return object;

      })(baseclass);
      o = new object();
      (o.m1()).should.equal("bar");
      return (o.m2()).should.equal("baz");
    });
    return it("Should overwrite properly with the instances and super", function() {
      var baseclass, bc, o, object;
      baseclass = (function(_super) {
        __extends(baseclass, _super);

        function baseclass() {
          return baseclass.__super__.constructor.apply(this, arguments);
        }

        baseclass.prototype.m1 = function() {
          return "foo";
        };

        baseclass.prototype.m2 = function() {
          return 'bar';
        };

        return baseclass;

      })(obj);
      bc = new baseclass();
      (bc.m1()).should.equal("foo");
      (bc.m2()).should.equal("bar");
      object = (function(_super) {
        __extends(object, _super);

        function object() {
          return object.__super__.constructor.apply(this, arguments);
        }

        object.extend(IS.Modules.Overwrite._extend_);

        IS.Modules.Overwrite("m1", (function() {
          return this._super_() + "bar";
        }), object.prototype);

        object._overwrite_("m2", (function() {
          return this._super_() + "baz";
        }));

        return object;

      })(baseclass);
      o = new object();
      (o.m1()).should.equal("foobar");
      return (o.m2()).should.equal("barbaz");
    });
  });

}).call(this);
