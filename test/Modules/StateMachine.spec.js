// Generated by CoffeeScript 1.7.1
(function() {
  var IS, chai, obj;

  IS = require("../../lib/isf.js");

  obj = IS.Object.clone();

  chai = require("chai");

  chai.should();

  obj.extend(IS.Modules.StateMachine);

  describe("StateMachine Module", function() {
    it("Should have the properties when extended", function() {
      var o;
      o = obj.clone();
      o.should.have.property('delegateContext');
      o.should.have.property('activateContext');
      o.should.have.property('deactivateContext');
      o.should.have.property('_contexts');
      return o.should.have.property('switchContext');
    });
    it("Should delegate contexts right", function() {
      var a, o;
      a = {
        name: "barabula"
      };
      o = obj.clone();
      o.delegateContext(a);
      a.should.have.property("activate");
      a.should.have.property("deactivate");
      (typeof a.activate).should.equal('function');
      return (typeof a.deactivate).should.equal('function');
    });
    it("Should find contexts appropriately", function() {
      var a, b, o;
      a = {
        name: "barabula"
      };
      b = {
        name: "cartof"
      };
      o = obj.clone();
      o.delegateContext(a);
      o.delegateContext(b);
      (o._find(a)).should.not.equal(null);
      return (o._find(b)).should.not.equal(null);
    });
    it("Should trigger functions accordingly", function() {
      var a, o;
      a = {
        name: "barabula",
        activate: function() {
          return this.name;
        },
        deactivate: function() {
          return "booger";
        }
      };
      o = obj.clone();
      o.delegateContext(a);
      (a.activate()).should.equal(a.name);
      (a.deactivate()).should.equal("booger");
      (o.activateContext(a)).should.equal(a.name);
      return (o.deactivateContext(a)).should.equal("booger");
    });
    return it("Should switch contexts accordingly", function() {
      var a, b, c, d, o;
      a = {
        name: "barabula"
      };
      b = {
        name: "cartof"
      };
      c = {
        name: "potato"
      };
      d = {
        name: "tato"
      };
      o = obj.clone();
      o.delegateContext(a);
      o.delegateContext(b);
      o.delegateContext(c);
      o.delegateContext(d);
      o.activateContext(a);
      (o.switchContext()).should.equal(b);
      (o.switchContext(d)).should.equal(d);
      return (o.switchContext()).should.equal(a);
    });
  });

}).call(this);
